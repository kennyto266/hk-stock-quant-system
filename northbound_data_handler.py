#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\"\"\"\n北水數據處理器\n用於解析JSON數據並計算技術指標\n\"\"\"\n\nimport json\nimport pandas as pd\nimport numpy as np\nfrom datetime import datetime\nimport os\nfrom typing import Dict, List, Optional\n\nclass NorthboundDataHandler:\n    \"\"\"北水數據處理器\"\"\"\n    \n    def __init__(self, json_folder_path: str = \"../北水json\"):\n        self.json_folder_path = json_folder_path\n        self.raw_data = []\n        self.processed_data = None\n        \n    def load_json_files(self) -> List[Dict]:\n        \"\"\"載入所有JSON文件\"\"\"\n        json_files = []\n        \n        if not os.path.exists(self.json_folder_path):\n            print(f\"❌ 找不到北水數據目錄: {self.json_folder_path}\")\n            return json_files\n        \n        for filename in sorted(os.listdir(self.json_folder_path)):\n            if filename.endswith('.json'):\n                file_path = os.path.join(self.json_folder_path, filename)\n                try:\n                    with open(file_path, 'r', encoding='utf-8') as f:\n                        data = json.load(f)\n                        json_files.append(data)\n                        print(f\"✅ 載入: {filename}\")\n                except Exception as e:\n                    print(f\"❌ 載入失敗 {filename}: {e}\")\n        \n        print(f\"📊 總共載入 {len(json_files)} 個JSON文件\")\n        return json_files\n    \n    def parse_northbound_data(self, raw_data: List[Dict]) -> pd.DataFrame:\n        \"\"\"解析北水數據\"\"\"\n        parsed_records = []\n        \n        for daily_data in raw_data:\n            if not isinstance(daily_data, list):\n                continue\n                \n            for market_data in daily_data:\n                date = market_data.get('date', '')\n                market = market_data.get('market', '')\n                \n                if not date or not market:\n                    continue\n                \n                # 解析交易數據\n                content = market_data.get('content', [])\n                for item in content:\n                    if item.get('style') == 1:  # 總體數據\n                        table = item.get('table', {})\n                        tr_data = table.get('tr', [])\n                        \n                        if tr_data:\n                            try:\n                                # 提取總成交額\n                                total_turnover = 0\n                                if len(tr_data) > 0:\n                                    turnover_str = tr_data[0]['td'][0][0].replace(',', '')\n                                    total_turnover = float(turnover_str)\n                                \n                                # 提取交易筆數\n                                trade_count = 0\n                                if len(tr_data) > 1:\n                                    count_str = tr_data[1]['td'][0][0].replace(',', '')\n                                    trade_count = int(count_str)\n                                \n                                parsed_records.append({\n                                    'Date': pd.to_datetime(date),\n                                    'Market': market,\n                                    'Total_Turnover': total_turnover,\n                                    'Trade_Count': trade_count\n                                })\n                                \n                            except (IndexError, ValueError, KeyError) as e:\n                                print(f\"⚠️ 解析錯誤 {date} {market}: {e}\")\n        \n        if not parsed_records:\n            print(\"❌ 沒有解析到有效數據\")\n            return pd.DataFrame()\n        \n        df = pd.DataFrame(parsed_records)\n        print(f\"✅ 解析完成，共 {len(df)} 條記錄\")\n        return df\n    \n    def aggregate_daily_data(self, df: pd.DataFrame) -> pd.DataFrame:\n        \"\"\"聚合每日數據\"\"\"\n        if df.empty:\n            return df\n        \n        # 按日期聚合所有市場的數據\n        daily_agg = df.groupby('Date').agg({\n            'Total_Turnover': 'sum',\n            'Trade_Count': 'sum'\n        }).reset_index()\n        \n        # 排序\n        daily_agg = daily_agg.sort_values('Date').reset_index(drop=True)\n        \n        print(f\"📊 聚合後數據範圍: {daily_agg['Date'].min()} 到 {daily_agg['Date'].max()}\")\n        return daily_agg\n    \n    def calculate_technical_indicators(self, df: pd.DataFrame) -> pd.DataFrame:\n        \"\"\"基於北水數據計算技術指標\"\"\"\n        if df.empty:\n            return df\n        \n        df = df.copy()\n        \n        # 成交額作為\"價格\"數據\n        df['Price'] = df['Total_Turnover']\n        df['Volume'] = df['Trade_Count']\n        \n        # 計算移動平均\n        df['MA_5'] = df['Price'].rolling(window=5).mean()\n        df['MA_10'] = df['Price'].rolling(window=10).mean()\n        df['MA_20'] = df['Price'].rolling(window=20).mean()\n        \n        # 計算RSI (基於成交額變化)\n        def calculate_rsi(prices, period=14):\n            delta = prices.diff()\n            gain = (delta.where(delta > 0, 0)).rolling(window=period).mean()\n            loss = (-delta.where(delta < 0, 0)).rolling(window=period).mean()\n            rs = gain / loss\n            rsi = 100 - (100 / (1 + rs))\n            return rsi\n        \n        df['RSI'] = calculate_rsi(df['Price'])\n        \n        # 計算MACD\n        exp1 = df['Price'].ewm(span=12).mean()\n        exp2 = df['Price'].ewm(span=26).mean()\n        df['MACD'] = exp1 - exp2\n        df['MACD_Signal'] = df['MACD'].ewm(span=9).mean()\n        df['MACD_Histogram'] = df['MACD'] - df['MACD_Signal']\n        \n        # 計算布林帶\n        df['BB_Middle'] = df['Price'].rolling(window=20).mean()\n        bb_std = df['Price'].rolling(window=20).std()\n        df['BB_Upper'] = df['BB_Middle'] + (bb_std * 2)\n        df['BB_Lower'] = df['BB_Middle'] - (bb_std * 2)\n        \n        # 計算成交額變化率\n        df['Turnover_Change'] = df['Price'].pct_change()\n        df['Volume_Change'] = df['Volume'].pct_change()\n        \n        print(f\"✅ 技術指標計算完成\")\n        return df\n    \n    def process_all_data(self) -> pd.DataFrame:\n        \"\"\"處理所有數據的主函數\"\"\"\n        print(\"🔄 開始處理北水數據...\")\n        \n        # 1. 載入JSON文件\n        raw_data = self.load_json_files()\n        if not raw_data:\n            return pd.DataFrame()\n        \n        # 2. 解析數據\n        parsed_df = self.parse_northbound_data(raw_data)\n        if parsed_df.empty:\n            return pd.DataFrame()\n        \n        # 3. 聚合每日數據\n        daily_df = self.aggregate_daily_data(parsed_df)\n        if daily_df.empty:\n            return daily_df\n        \n        # 4. 計算技術指標\n        final_df = self.calculate_technical_indicators(daily_df)\n        \n        # 5. 保存處理後的數據\n        self.processed_data = final_df\n        \n        # 6. 保存到CSV\n        output_path = \"data_output/csv/northbound_processed_data.csv\"\n        os.makedirs(os.path.dirname(output_path), exist_ok=True)\n        final_df.to_csv(output_path, index=False, encoding='utf-8-sig')\n        print(f\"💾 數據已保存到: {output_path}\")\n        \n        return final_df\n    \n    def get_stock_proxy_data(self, symbol=\"2800.HK\") -> pd.DataFrame:\n        \"\"\"基於北水數據生成股票代理數據\"\"\"\n        if self.processed_data is None or self.processed_data.empty:\n            print(\"❌ 沒有處理後的北水數據\")\n            return pd.DataFrame()\n        \n        df = self.processed_data.copy()\n        \n        # 生成OHLC數據（基於成交額）\n        base_price = 100  # 基準價格\n        \n        # 使用成交額變化來模擬價格變化\n        price_changes = df['Turnover_Change'].fillna(0)\n        \n        # 計算累積價格\n        df['Close'] = base_price * (1 + price_changes).cumprod()\n        \n        # 生成Open, High, Low\n        df['Open'] = df['Close'].shift(1).fillna(base_price)\n        \n        # 使用日內波動率生成High和Low\n        daily_volatility = abs(price_changes) * 2\n        df['High'] = df['Close'] * (1 + daily_volatility)\n        df['Low'] = df['Close'] * (1 - daily_volatility)\n        \n        # 確保High >= Close >= Low 和 High >= Open >= Low\n        df['High'] = df[['High', 'Close', 'Open']].max(axis=1)\n        df['Low'] = df[['Low', 'Close', 'Open']].min(axis=1)\n        \n        # 重新排列列\n        stock_data = df[['Date', 'Open', 'High', 'Low', 'Close', 'Volume']].copy()\n        stock_data.set_index('Date', inplace=True)\n        \n        print(f\"✅ 生成股票代理數據: {len(stock_data)} 條記錄\")\n        print(f\"📊 價格範圍: {stock_data['Close'].min():.2f} - {stock_data['Close'].max():.2f}\")\n        \n        return stock_data\n\n# 測試函數\nif __name__ == \"__main__\":\n    handler = NorthboundDataHandler()\n    processed_data = handler.process_all_data()\n    \n    if not processed_data.empty:\n        print(\"\\n📊 數據概覽:\")\n        print(processed_data.head())\n        print(f\"\\n📈 數據統計:\")\n        print(processed_data.describe())\n        \n        # 生成股票代理數據\n        stock_data = handler.get_stock_proxy_data()\n        if not stock_data.empty:\n            print(\"\\n🏢 股票代理數據:\")\n            print(stock_data.head()) 